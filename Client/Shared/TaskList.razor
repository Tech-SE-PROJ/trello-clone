@using Classes;
<div class="task-status">
    <h3>@ListStatus (@Tasks.Count())</h3>

    <ul class="dropzone @dropClass" 
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">

        @foreach (var task in Tasks)
        {
            <Task TaskModel="task" />
        }

    </ul>
</div>
@code {

    [CascadingParameter] TasksContainer Container { get; set; }
    [Parameter] public TaskStatuses ListStatus { get; set; }
    [Parameter] public TaskStatuses[] AllowedStatuses { get; set; }

    List<TaskModel> Tasks = new List<TaskModel>();
    string dropClass = "";

    protected override void OnParametersSet()
    {
        Tasks.Clear();
        Tasks.AddRange(Container.Events.Where(x => x.Status == ListStatus));
    }


    private void HandleDragEnter()
    {
        if (ListStatus == Container.Payload.Status) return;

        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status))
        {
            dropClass = "no-drop";
        }
        else
        {
            dropClass = "can-drop";
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async System.Threading.Tasks.Task HandleDrop()
    {
        dropClass = "";

        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status)) return;

        await Container.UpdateTask(ListStatus);
    }
}
}
