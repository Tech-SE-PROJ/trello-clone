@page "/"
@using trello_clone.Shared.Classes
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<PageTitle>Index</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Outlined>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" @onsubmit="() => Register(registerName, registerPass, registerEmail)">
            <MudElement HtmlTag="h1">Registration</MudElement>
                <MudTextField bind-Value="registerName" T="string" Label="Username" Required="true" RequiredError="User name is required!" />
                <MudTextField bind-Value="registerPass" T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <MudTextField bind-Value="registerEmail" T="string" Label="Email" Required="true" RequiredError="Email is required!"/>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Register</MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full mud-height-full py-8" Outlined>
            <MudForm @ref="form2" @bind-IsValid="@success" @bind-Errors="@errors2" @onsubmit="() => Login(loginName, loginPass)">
            <MudElement HtmlTag="h1">Login</MudElement>
                <MudTextField bind-Value="loginName" T="string" Label="Username" Required="true" RequiredError="User name is required!" />
                <MudTextField bind-Value="loginPass" T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField2"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form2.Validate())">Login</MudButton>
            </MudForm>
        </MudPaper>
        </MudItem>
</MudGrid>
@code {
    bool success;
    string[] errors = { };
    string[] errors2 = { };
    MudTextField<string> pwField1;
    MudTextField<string> pwField2;
    MudForm form;
    MudForm form2;
    string registerName, registerPass, registerEmail, loginName, loginPass;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private async Task Register(string userName, string userPass, string userEmail)
    {
        var res = await Http.GetAsync($"Register/{userName}/{userPass}/{userEmail}");
    }
    private async Task Login(string userName, string userPass)
    {
        var res = await Http.GetAsync($"Login/{userName}/{userPass}");
    }
}


