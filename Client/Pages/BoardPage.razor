@page "/boards/{boardName}"
@using MudBlazor;
@using trello_clone.Shared
@using trello_clone.Shared.Classes
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using trello_clone.Client.Components
@inject HttpClient Http
@inject NavigationManager NavManager
@inject StateContainer StateContainer
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@implements IDisposable

<style>
    .board-container {
        width: 100%;
        height: 100vh;
    }

    .board-title {
        display: inline-block;
        width: 100%;
        height: 80%;
    }

    .column-section {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        height: 80%;
        width: 100%;
    }

    .add-taskcard {
        display: flex;
        flex-direction: row;
        width: 33%;
    }
</style>

<div class="board-container">
    @if (Board == null)
    {
        <p>... Loading</p>
    }
    else
    {
        <h1>@Board.Name</h1>

        <EditForm class="add-taskcard" Model="newTaskCard" OnValidSubmit="AddTaskCard">
            <InputText class="form-control mx-2" @bind-Value="newTaskCard.Name" />
            <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Work Item</MudButton>
        </EditForm>
        <br />
        <div class="column-section">
            @foreach (var column in Columns)
            {
                <ColumnComponent Column="@column" />
            }
        </div>
    }

</div>
<div class="user-list">
    <MudGrid Spacing="4" Justify="Justify.Center">
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center justify-center py-8" Outlined>
                <MudText Align="Align.Center" Typo="Typo.h3">Team Members</MudText>
            </MudPaper>
        </MudItem>
        @foreach (User user in users!)
        {
            <MudItem>
                <MudPaper Height="40px" Width="140px" Class="d-flex align-center justify-center mud-width-full py-8" Outlined>@user.UserName</MudPaper>
            </MudItem>
        }
    </MudGrid>
</div>
@code {
    [Parameter]
    public string? boardName { get; set; }

    private Board Board => StateContainer.SelectedBoard;
    private List<User>? users = new();
    private List<Column> Columns => Board.Columns;
    private Team? currentTeam;
    private TaskCard newTaskCard = new TaskCard();

    private List<TaskCard>? taskCards;

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        currentTeam = await Http.GetFromJsonAsync<Team>($"team/name/{Board.Name}");
        users = await Http.GetFromJsonAsync<List<User>>($"usersteams/get-users/team/{currentTeam!.TeamId}");
        taskCards = await Http.GetFromJsonAsync<List<TaskCard>?>($"taskcard/get-task-cards/{Board.Id}");
    }

    private async Task AddTaskCard()
    {
        var columnId = Columns.First().Id;
        var newCardIndex = Columns.First().TaskCards != null ? Columns.First().TaskCards!.Count : 0;
        newTaskCard.BoardId = Board.Id;
        taskCards = await Http.GetFromJsonAsync<List<TaskCard>>($"taskcard/AddTaskCard/{newTaskCard.BoardId}/{newTaskCard.Name}/{columnId}/{newCardIndex}");
        Columns.First().TaskCards = taskCards;
        newTaskCard = new TaskCard();
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
