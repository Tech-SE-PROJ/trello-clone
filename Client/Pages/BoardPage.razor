@page "/boards/{boardName}"
@using MudBlazor;
@using trello_clone.Shared
@using trello_clone.Shared.Classes
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using trello_clone.Client.Components
@inject HttpClient Http
@inject NavigationManager NavManager
@inject StateContainer StateContainer
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@implements IDisposable

<style>
    .board-container {
        width: 100%;
        height: 100vh;
    }

    .board-title {
        display: inline-block;
        width: 100%;
        height: 80%;
    }

    .column-section {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        height: 80%;
        width: 100%;
    }

    .add-taskcard {
        display: flex;
        flex-direction: row;
        min-width: 33%;
        width: fit-content;
    }
</style>

<div class="board-container">
    @if (SelectedBoard == null)
    {
        <p>... Loading</p>
    }
    else
    {
        <h1>@SelectedBoard.Name <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" @onclick="OpenCardSettings"></MudIconButton></h1>

        <EditForm class="add-taskcard" Model="newTaskCard" OnValidSubmit="AddTaskCard">
            <InputText class="form-control mx-2" @bind-Value="newTaskCard.Name" />
            <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Work Item</MudButton>
        </EditForm>
        <br />
        <div class="column-section">
            @foreach (var column in Columns)
            {
                <ColumnComponent Column="@column" 
                    OnDeleteColumn="DeleteColumn"
                    OnCardDragStart="OnCardDragStart" 
                    OnCardDragEnd="OnCardDragEnd" 
                    OnDragEnterColumn="OnCardDragEnterColumn"
                    OnCardDragEnter="OnCardDragEnter" 
                    OnCardDragEnterBottom="OnCardDragEnterBottom" 
                    OnCardDropBottom="OnCardDropBottom" 
                    OnCardDropOver="OnCardDropOver"/>
            }
        </div>
    }

</div>
<div class="user-list">
    <MudGrid Spacing="4" Justify="Justify.Center">
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center justify-center py-8" Outlined>
                <MudText Align="Align.Center" Typo="Typo.h3">Team Members</MudText>
            </MudPaper>
        </MudItem>
        @if (users is not null)
        {
            @foreach (User user in users!)
            {
                <MudItem>
                    <MudPaper Height="40px" Width="140px" Class="d-flex align-center justify-center mud-width-full py-8" Outlined>@user.UserName</MudPaper>
                </MudItem>
            }
        }
    </MudGrid>
</div>

<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
    <DialogContent>
        <MudText Align="Align.Center" Typo="Typo.h4">Settings</MudText>
        <EditForm class="add-taskcard" Model="newColumn" OnValidSubmit="AddColumn">
            <InputText class="form-control mx-2" @bind-Value="newColumn.Name" />
            <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Column</MudButton>
        </EditForm>
    </DialogContent>
    <DialogActions>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public string? boardName { get; set; }
    
    private Team? currentTeam;
    
    private Board SelectedBoard => StateContainer.SelectedBoard;

    private List<User>? users;

    public List<Column> Columns => SelectedBoard.Columns ?? new List<Column>();

    private Column newColumn = new Column();

    private TaskCard newTaskCard = new TaskCard();

    private List<TaskCard>? taskCards;

    private TaskCard? DraggedCard;

    private TaskCard? DragEnter;

    private int DraggedItemIndex;

    private Guid? initialColumnId;

    private Guid? finalColumnId;

    private bool visible = false;

    DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

    protected void OpenCardSettings() => visible = true;

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        currentTeam = await Http.GetFromJsonAsync<Team>($"team/name/{SelectedBoard.Name}");
        users = await Http.GetFromJsonAsync<List<User>>($"usersteams/get-users/team/{currentTeam!.TeamId}");
        taskCards = await Http.GetFromJsonAsync<List<TaskCard>?>($"taskcard/get-task-cards/{SelectedBoard.Id}");
    }

    private async Task DeleteColumn(Guid columnId)
    {
        await Http.GetAsync($"column/DeleteColumn/{columnId}");

        var columnToRemove = SelectedBoard.Columns.FirstOrDefault(column => column.Id == columnId);

        SelectedBoard.Columns.Remove(columnToRemove);

        Task.Run(() => SaveChanges());
    }

    private async Task AddTaskCard()
    {
        var columnId = Columns.First().Id;
        var newCardIndex = Columns.First().TaskCards != null ? Columns.First().TaskCards!.Count : 0;
        newTaskCard.BoardId = SelectedBoard.Id;
        var updatedTaskCards = await Http.GetFromJsonAsync<List<TaskCard>>($"taskcard/AddTaskCard/{newTaskCard.BoardId}/{newTaskCard.Name}/{columnId}/{newCardIndex}");
        Columns.First().TaskCards = updatedTaskCards;
        newTaskCard = new TaskCard();
    }

    private async Task AddColumn()
    {
        var columnIndex = Columns.Count;

        var updatedColumn = await Http.GetFromJsonAsync<Column>($"column/AddColumn/{SelectedBoard.Id}/{newColumn.Name}/{columnIndex}");

        SelectedBoard.Columns.Add(updatedColumn);

        visible = false;

        newColumn = new Column();
    }

    #region DragDrop

    public void OnCardDragEnterColumn(Guid columnId)
    {
        finalColumnId = columnId;
    }

    public void OnCardDragStart(TaskCard taskCard)
    {
        DraggedCard = taskCard;
        initialColumnId = taskCard.ColumnId;
        DraggedItemIndex = Columns.FirstOrDefault(col => col.Id == initialColumnId).TaskCards.IndexOf(taskCard);
    }

    public void OnCardDragEnd()
    {
        if (DraggedCard == null) return;

        DraggedCard.ColumnId = finalColumnId;

        Columns.FirstOrDefault(col => col.Id == initialColumnId)?.TaskCards?.Remove(DraggedCard);

        if (finalColumnId != initialColumnId) Columns.FirstOrDefault(col => col.Id == finalColumnId)?.TaskCards?.Add(DraggedCard);
        else Columns.FirstOrDefault(col => col.Id == finalColumnId)?.TaskCards?.Insert(DraggedItemIndex, DraggedCard);

        DragEnter = null;

        Task.Run(() => SaveChanges());
    }

    public void OnCardDropOver(TaskCard cardDroppedOn)
    {
        DragEnter = null;
        if (DraggedCard == null) return;
        if (DraggedCard == cardDroppedOn) return;

        DraggedCard.ColumnId = finalColumnId;
        Columns.FirstOrDefault(col => col.Id == initialColumnId)?.TaskCards?.Remove(DraggedCard);
        var cardDroppedOnIndex = Columns.FirstOrDefault(col => col.Id == finalColumnId).TaskCards.IndexOf(cardDroppedOn);
        Columns.FirstOrDefault(col => col.Id == finalColumnId)?.TaskCards?.Insert(cardDroppedOnIndex, DraggedCard);
        DraggedCard = null;

        Task.Run(() => SaveChanges());
    }

    public void OnCardDropBottom()
    {
        DragEnter = null;
        if (DraggedCard == null) return;

        DraggedCard.ColumnId = finalColumnId;
        Columns.FirstOrDefault(col => col.Id == initialColumnId).TaskCards.Remove(DraggedCard);
        Columns.FirstOrDefault(col => col.Id == finalColumnId).TaskCards.Add(DraggedCard);
        DraggedCard = null;

        Task.Run(() => SaveChanges());
    }

    public void OnCardDragEnter(TaskCard enteredCard)
    {
        DragEnter = enteredCard;
    }

    public void OnCardDragEnterBottom()
    {
        DragEnter = null;
    }

    #endregion

    public async Task SaveChanges()
    {
        var response = await Http.PostAsJsonAsync<Board>($"boards/UpdateBoard", SelectedBoard);
    }

    public void Dispose()
    {
        Task.Run(() => SaveChanges());
        StateContainer.OnChange -= StateHasChanged;
    }
}
