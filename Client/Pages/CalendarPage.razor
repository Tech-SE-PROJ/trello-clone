@page "/calendar"

@using trello_clone.Shared.Classes
    <style type="text/css">
        #tblParent tbody tr td {
            width: 200px;
            height: 200px;
        }

        #divParent {
            position:relative;
        }
        #divModal {
            z-index:10;
            position:absolute;
            border: 1px solid #000000;
            border-radius: 3px;
            background-color:#ffffff;
            left:40%;
            top:20%;
            width:400px;
            min-height: 300px;


        }
        .modalHeading {
            text-align:center;
            font-size:50px;
            text-decoration: underline;
            margin-bottom:36px;
        }
        </style>

<h1>Blazor Calendar</h1>
@*@if(displayModal)
*@@*{
    <div id ="divModal">
        <div class="container">
            <div class="panel panel-default">
                <div class="panel-heading modalHeading">Title</div>
                <div class ="panel-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label> From Date: </label>
                        </div>
                            <div class="col-md-8">

                            </div>
                                <input type="date" style="width:100%;"/>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <label> To Date: </label>
                    </div>
                    <div class="col-md-8">
                        <input type="date" style="width:100%;"/>
                        </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <label> Note: </label>
                            </div>
                            <div class ="col-md-8">
                                <input type="text" placeholder="Type here..."/>
                            </div>
                        </div>
                        <div class="row" style="margin-bottom : 10px;">
                            <div class="col-md-6">

                            </div>
                            <div class="col-md-6" style="text-align:right;">
                                <button class="btn btn-danger" @onclick ="CloseModal" style="float:left;">Cancel</button>
                    <button class="btn btn-success" @onclick="OnEventSave"style="float:left; margin-right:5px;">save</button>>
                            </div>
                        </div>
                        </div>
    </div>
}*@

<select @onchange="LoadCalendar">
    @foreach (string monthName in monthNames)
    {
        <option>@monthName</option>
    }
</select>
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            @for (var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
            {
                <th>
                    @days[dayIndex]
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @for (var weekIndex = 0; weekIndex<weeks.Count();weekIndex++)
        {
            <tr>
                @for(var dayIndex=0;dayIndex<weeks[weekIndex].Dates.Count(); dayIndex++)
                {
                    var wIndex = weekIndex;
                    var dIndex = dayIndex;
                    <td @ondblclick="@(()=>OpenModal(wIndex,dIndex))">
                        @weeks[weekIndex].Dates[dayIndex].DateValue
                        <br /><br />
                        <label style="color:#c00;font-weight:bold">@weeks[weekIndex].Dates[dayIndex].Note</label>
                        <br /><br />

                        cell Number : [@weekIndex,@dayIndex]
                    

                    </td>
                }

            </tr>
        }

    </tbody>

</table>
@code {
    bool displayModal = false;
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<Weekclass> weeks = new List<Weekclass>();
    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);

    protected override void OnInitialized()
    {
        monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        GenerateCalendarHead();
        GenerateCalendarBody();
    }
    private void LoadCalendar(ChangeEventArgs e)
    {
        var month = e.Value.ToString();
        int monthIndex = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("en-GB")).Month;
        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);

        GenerateCalendarHead();
        GenerateCalendarBody();
    }
    private void GenerateCalendarHead()
    {
        var day1 = new List<string>();
        for(var dt = startDate; dt <=endDate; dt =dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        days = day1.Distinct().ToList();
    }
    private void GenerateCalendarBody()
    {
        weeks = new List<Weekclass>();

        int flag = 0;
        Weekclass week = new Weekclass();
        List<DayEvent> dates = new List<DayEvent>();
        var totalDays = (int)(endDate - startDate).TotalDays;
        int countdays = 0;

        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            flag++;
            dates.Add(new DayEvent()
                {
                    DateValue = dt.ToString("dd-MMM-yyyy"),
                    DayName = dt.ToString("dddd")
                });

            if (flag==7)
            {
                week = new Weekclass();
                week.Dates = dates;
                weeks.Add(week);

                dates = new List<DayEvent>();
                flag = 0;

            }
            if (countdays == totalDays)
            {
                week = new Weekclass();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }
            countdays++;
        }
    }
    private void CloseModal()
    {
        displayModal = false;
    }
    private void OpenModal(int wIndex,int dIndex)
    {
        displayModal = true;
    }
    private void OnEventSave ()
    {
        
    }
}
