@page "/boards"
@using MudBlazor;
@using trello_clone.Shared
@using trello_clone.Shared.Classes
@using trello_clone.Client.Components
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavManager
@inject StateContainer StateContainer
@implements IDisposable

<style>
    .add-board {
        display: flex;
        flex-direction: row;
        width: 33%;
    }
</style>

<PageTitle>Boards</PageTitle>

<h1>Boards</h1>
@*
    TODO:
        Make the button in the EditForm make a new MudCard
*@
<EditForm class="add-board" Model="newBoard" OnValidSubmit="AddBoard">
	<InputText class="form-control mx-2" @bind-Value="newBoard.Name" />
    <MudButton ButtonType="ButtonType.Submit"  StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Board</MudButton>
</EditForm>
@*<button class="btn btn-primary" type="button" onclick="() => @OpenModal()">show modal</button>*@

@*<MudCard Outlined="true" Style="width: 20%">
	<MudCardContent>
		<MudText>Name of board</MudText>
		<MudText Typo="Typo.body2">Description of board (optional)</MudText>
	</MudCardContent>
	<MudCardActions>
		<MudButton Href="boards/default"
				   Target="_self"
				   Variant="Variant.Filled"
				   Color="Color.Primary">		   
			Enter
		</MudButton>
	</MudCardActions>
</MudCard>*@

<body>
    @if (boards == null)
    {
        <p><em>... loading</em></p>
    }
    else
    {
        @foreach (var board in boards)
        {
            <div>
                <p @onclick="() => BoardClicked(board)" >@board.Name</p>
                
            </div>
        }
    }

</body>

@code {
    private IEnumerable<Board>? boards;
    private Board newBoard = new Board();


    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;

        await GetBoards();
    }

    private async Task GetBoards()
    {
        boards = await Http.GetFromJsonAsync<Board[]>("Boards/BoardList");

        StateContainer.Boards = boards?.ToList();
    }

    private async Task AddBoard()
    {
        await Http.GetAsync($"Boards/Addboard/{newBoard.Name}");

        await GetBoards();

        newBoard = new Board();
    }

    private void BoardClicked(Board clickedBoard)
    {
        StateContainer.SelectedBoard = clickedBoard;

        NavManager.NavigateTo($"boards/{clickedBoard.Name}");
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
