@page "/boards"
@using MudBlazor;
@using trello_clone.Shared
@using trello_clone.Shared.Classes
@using trello_clone.Client.Components
@using Microsoft.AspNetCore.Components
@inject HttpClient Http
@inject NavigationManager NavManager
@inject StateContainer StateContainer
@inject ISnackbar snackbar
@implements IDisposable

<style>
    .add-board {
        display: flex;
        flex-direction: row;
        width: 33%;
    }
</style>

<PageTitle>Boards</PageTitle>

<h1>Boards</h1>

<EditForm class="add-board" Model="newBoard" OnValidSubmit="AddBoard">
	<InputText class="form-control mx-2" @bind-Value="newBoard.Name" />
    <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Board</MudButton>
</EditForm>

<body>
    @if (boards == null)
    {
        <p><em>... loading</em></p>
    }
    else
    {
        @foreach (var board in boards)
        {
            <div>
                <p @onclick="() => BoardClicked(board)" >@board.Name</p>
                
            </div>
        }
    }

</body>

@code {
    private IEnumerable<Board>? boards;
    private Board newBoard = new Board();
    private List<Team>? teams;

    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;
        await GetBoards();
        teams = await Http.GetFromJsonAsync<List<Team>>($"team/get-teams");
    }

    private async Task GetBoards()
    {
        boards = await Http.GetFromJsonAsync<Board[]>("Boards/BoardList");

        StateContainer.Boards = boards?.ToList();
    }

    private async Task AddBoard()
    {
        foreach(var t in teams!)
        {
            if(t.TeamName == newBoard.Name)
            {
                snackbar.Add($"A board of the name '{newBoard.Name}' already exists.", Severity.Error);
                return;
            }
        }
        await Http.GetAsync($"Boards/Addboard/{newBoard.Name}");
        Team team = new() { TeamId = Guid.NewGuid(), TeamName = newBoard.Name };
        await Http.PostAsJsonAsync<Team>($"team/add-team", team);
        UsersTeams usersTeams = new() { UserId = StateContainer.LoggedInUser!.UserId, TeamId = team.TeamId };
        await Http.PostAsJsonAsync<UsersTeams>("UsersTeams/add-userteams", usersTeams);
        await GetBoards();
        newBoard = new Board();
    }

    private void BoardClicked(Board clickedBoard)
    {
        StateContainer.SelectedBoard = clickedBoard;

        NavManager.NavigateTo($"boards/{clickedBoard.Name}");
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
