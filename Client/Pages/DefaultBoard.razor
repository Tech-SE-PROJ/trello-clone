@page "/boards/default"
@using trello_clone.Shared.Classes
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations

@*TODO:
	Get back button by using a page history manager
	Get save button to save in SQL somehow
	Have SQL retrieve all the info for that page
	Somehow make the default board dynamically link to a new named page...
	Implement a settings menu in the board panel linking to this page for members, calendar, etc.
*@
<MudDropContainer T="TaskCard" @ref="dropContainer" Items="@cards" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="CardUpdated" Class="d-flex flex-row">
	<ChildContent>
		@foreach (var card in columns)
		{
			<MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
				<MudToolBar DisableGutters="true">
					<MudText Typo="Typo.subtitle1"><b>@card.Name</b></MudText>
					<MudSpacer />
					<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
						<MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteColumn(card))">Delete Section</MudButton>
						<MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Rename Section</MudButton>
					</MudMenu>
				</MudToolBar>
				<MudDropZone T="TaskCard" Identifier="@card.Name" Class="mud-height-full" />
				@if (card.NewCardOpen)
				{
					<MudPaper Elevation="25" Class="pa-2 rounded-lg">
						<MudTextField @bind-Value="card.NewCardName" Placeholder="New Card" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
						<MudButton OnClick="@(() => AddCard(card))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Card</MudButton>
					</MudPaper>
				}
				else
				{
					<MudButton OnClick="@(() => card.NewCardOpen = !card.NewCardOpen)" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Card</MudButton>
				}
			</MudPaper>
		}
		<MudPaper Class="pa-4" Elevation="0" Width="224px">
			@if (addColumnOpen)
			{
				<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
					<EditForm Model="@newColumnModel" OnValidSubmit="OnValidSectionSubmit">
						<DataAnnotationsValidator />
						<MudTextField @bind-Value="newColumnModel.Name" For="@(() => newColumnModel.Name)" Placeholder="New Column" DisableUnderLine="true"></MudTextField>
						<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Column</MudButton>
					</EditForm>
				</MudPaper>
			}
			else
			{
				<MudButton OnClick="OpenAddNewColumn" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Column</MudButton>
			}
		</MudPaper>
	</ChildContent>
	<ItemRenderer>
		<MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Name</MudPaper>
	</ItemRenderer>
</MudDropContainer>

@code {
	private MudDropContainer<TaskCard> dropContainer;

	private bool addColumnOpen;

	private void CardUpdated(MudItemDropInfo<TaskCard> info)
	{
		info.Item.Status = info.DropzoneIdentifier;
	}

	private List<Column> columns = new()
		{
			new Column("To Do", false, String.Empty),
			new Column("In Progress", false, String.Empty),
			new Column("Done", false, String.Empty),
		};

	public class Column
	{
		public string Name { get; init; }
		public bool NewCardOpen { get; set; }
		public string NewCardName { get; set; }

		public Column(string name, bool newCardOpen, string newCardName)
		{
			Name = name;
			NewCardOpen = newCardOpen;
			NewCardName = newCardName;
		}
	}

	private List<TaskCard> cards = new()
	{
	};

	AddNewForm newColumnModel = new AddNewForm();

	public class AddNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
		public string Name { get; set; }
	}

	private void OnValidSectionSubmit(EditContext context)
	{
		columns.Add(new Column(newColumnModel.Name, false, String.Empty));
		newColumnModel.Name = string.Empty;
		addColumnOpen = false;
	}

	private void OpenAddNewColumn()
	{
		addColumnOpen = true;
	}

	private void AddCard(Column column)
	{
		cards.Add(new TaskCard(column.NewCardName, column.Name));
		column.NewCardName = string.Empty;
		column.NewCardOpen = false;
		dropContainer.Refresh();
	}

	private void DeleteColumn(Column column)
	{
		if (columns.Count == 1)
		{
			cards.Clear();
			columns.Clear();
		}
		else
		{
			int newIndex = columns.IndexOf(column) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			columns.Remove(column);

			var tasks = cards.Where<TaskCard>(x => x.Status == column.Name);
			foreach (var card in cards)
			{
				card.Status = columns[newIndex].Name;
			}
		}
	}
}