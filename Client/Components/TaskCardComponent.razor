@using Microsoft.AspNetCore.Components
@using trello_clone.Shared
@using trello_clone.Shared.Classes
@implements IDisposable
@inject HttpClient Http
@inject StateContainer stateContainer
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .task-container {
        display: flex;
        flex-direction: column;
        border: solid;
        border-width: 1px;
        border-radius: 5px;
        height: 20%;
        width: 80%;
    }
</style>

<div class="task-container">
    <h3>@taskCard!.Name<MudIconButton Icon="@Icons.Material.Filled.Settings" @onclick="OpenCardSettings"></MudIconButton></h3>
    <p>Assigned Person: @assignedUserName</p>
    <p>Date Created: @taskCard.DateCreated</p>
    <p>Last Modified: @taskCard.LastModified</p>
    @if(monthDayStr is null)
    {
        <p>No Completion Date</p>
    }
    else
    {
        <p>Completion Date: @monthDayStr</p>
    }
</div>

<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
    <DialogContent>
        <MudText Align="Align.Center" Typo="Typo.h4">Settings</MudText>
        <MudMenu Label="Assign a user" Variant="Variant.Filled" Color="Color.Primary">
            @foreach (User user in users!) @*should ONLY get users with the correct teamId for the board!!!!!*@
            {
                <MudMenuItem OnClick="@(() => AssignUserToCard(user.UserId))">@user.UserName</MudMenuItem> 
            }
        </MudMenu>
        <MudText Typo="Typo.h5">@assignedUserName</MudText>
        <MudDatePicker DisableToolbar="true" DateChanged=@((endDate) => StoreCalendarDate(endDate)) Label="Date of Completion" OpenTo="OpenTo.Date" FixYear="@DateTime.Today.Year" DateFormat="dd/MM/yyyy"/>
    </DialogContent>
    <DialogActions>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public TaskCard? taskCard { get; set; }
    private User[]? users;
    private string? monthDayStr;
    private string? assignedUserName;
    private List<TaskCard>? taskCards { get; set; }
    private bool visible = false;

    DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
    protected void OpenCardSettings() => visible = true;

    private async Task AssignUserToCard(Guid? id)
    {
        await Http.PutAsJsonAsync($"TaskCard/AssignUserToCard/user/{id}", taskCard!.Id);
        taskCard = await Http.GetFromJsonAsync<TaskCard>($"TaskCard/get-task-card/{stateContainer.SelectedBoard!.Id}/{taskCard.Id}");
        //await AddCardToList(updatedCard!);
        //await localStorage.SetItemAsync<List<TaskCard>>($"taskcards/{updatedCard!.BoardId}", taskCards!);
        AssignUserName(); 
        StateHasChanged();
    }

    private void AssignUserName()
    {
        User? foundUser = Array.Find(users!, element => element.UserId == taskCard!.AssignedUserId);
        assignedUserName = foundUser!.UserName;
    }

    protected override void OnInitialized()
    {
        stateContainer.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<User[]>("user/get-users");
        taskCards = await Http.GetFromJsonAsync<List<TaskCard>>($"taskcard/get-task-cards/{stateContainer.SelectedBoard!.Id}");
        //taskCards = await localStorage.GetItemAsync<List<TaskCard>>($"taskcards/{stateContainer.SelectedBoard!.Id}");
        taskCard = taskCards![taskCard!.Index!.Value];
        if (taskCard!.AssignedUserId is not null)
            AssignUserName();
        else
            assignedUserName = "None";
        if (taskCard!.EndDate is not null)
            monthDayStr = $"{taskCard!.EndDate.Value.Day}/{taskCard!.EndDate.Value.Month}/{taskCard!.EndDate.Value.Year}";
    }

    protected async Task StoreCalendarDate(DateTime? endDate)
    {
        if (endDate is null)
        {
            Snackbar.Add("Client error, unable to save DateTime", Severity.Error);
            return;
        }
        var res = await Http.PutAsJsonAsync<DateTime?>($"taskcard/store-date/{taskCard!.Id}", endDate);
        if (!res.IsSuccessStatusCode)
        {
            Snackbar.Add("Server error, unable to save DateTime to db", Severity.Error);
            return;
        }
        monthDayStr = $"{endDate.Value.Day}/{endDate.Value.Month}/{endDate.Value.Year}";
        //taskCard.EndDate = endDate;
        //await AddCardToList(taskCard); //keep if going back to localstorage
    }

    //private async Task<List<TaskCard>> AddCardToList(TaskCard newCard) //keep if going back to localstorage
    //{
    //    var existingCardIndex = taskCards!.FindIndex(cards => cards.Index == taskCard!.Index);
    //    taskCards[existingCardIndex] = newCard;
    //    await localStorage.SetItemAsync<List<TaskCard>>($"taskcards/{taskCard!.BoardId}", taskCards!);
    //    taskCards = await localStorage.GetItemAsync<List<TaskCard>>($"taskcards/{stateContainer.SelectedBoard!.Id}");
    //    return taskCards;
    //}

    public void Dispose()
    {
        stateContainer.OnChange -= StateHasChanged;
    }
}
