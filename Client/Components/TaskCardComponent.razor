@using Microsoft.AspNetCore.Components
@using trello_clone.Shared
@using trello_clone.Shared.Classes
@implements IDisposable
@inject HttpClient Http
@inject StateContainer stateContainer
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .task-container {
        display: flex;
        flex-direction: column;
        border: solid;
        border-width: 1px;
        border-radius: 5px;
        height: 20%;
        width: 80%;
    }
</style>

<div class="task-container">
    <h3>@taskCard.Name<MudIconButton Icon="@Icons.Material.Filled.Settings" @onclick="OpenCardSettings"></MudIconButton></h3>
    <p>Assigned Person: @assignedUserName</p>
    <p>Date Created: @taskCard.DateCreated</p>
    <p>Last Modified: @taskCard.LastModified</p>
</div>

<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
    <DialogContent>
        <MudText Align="Align.Center" Typo="Typo.h4">Settings</MudText>
        <MudMenu Label="Assign a user" Variant="Variant.Filled" Color="Color.Primary">
            @foreach (User user in users!)
            {
                <MudMenuItem OnClick="@(() => AssignUserToCard(user.UserId))">@user.UserName</MudMenuItem>
            }
        </MudMenu>
        <MudText Typo="Typo.h5">@assignedUserName</MudText>
        <MudDatePicker Label="Date of Completion" HelperText="@_monthDay?.ToShortDateString()" @bind-Date="_monthDay" OpenTo="OpenTo.Month" FixYear="@DateTime.Today.Year" DateFormat="MM/dd" />
    </DialogContent>
    <DialogActions>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public TaskCard taskCard { get; set; }
    private User[]? users;
    private string? userWithCardIdName;
    private DateTime? _monthDay;
    private User? foundUser;
    private string? assignedUserName;
    private List<TaskCard>? taskCards { get; set; }
    DialogOptions dialogOptions = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
    private bool visible = false;

    private async Task AssignUserToCard(Guid? id)
    {
        await Http.PutAsJsonAsync($"TaskCard/AssignUserToCard/user/{id}", taskCard.Id);
        var updatedCard = await Http.GetFromJsonAsync<TaskCard>($"TaskCard/get-task-card/{stateContainer.SelectedBoard!.Id}/{taskCard.Id}");
        taskCard.AssignedUserId = id;
        AddCardToList(updatedCard);
        await localStorage.SetItemAsync<List<TaskCard>>($"taskcards/{updatedCard.BoardId}", taskCards!);
        StateHasChanged();
    }

    private List<TaskCard>? AddCardToList(TaskCard newCard)
    {
        var existingCardIndex = taskCards!.FindIndex(cards => cards.Index == taskCard.Index);
        taskCards[existingCardIndex] = newCard;
        return taskCards;
    }

    protected override void OnInitialized()
    {
        stateContainer.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        //taskCard.BoardId = stateContainer.SelectedBoard!.Id; //is this needed
        users = await Http.GetFromJsonAsync<User[]>("user/get-users");
        taskCards = await Http.GetFromJsonAsync<List<TaskCard>>($"taskcard/get-task-cards/{stateContainer.SelectedBoard!.Id}");
        if (taskCard.AssignedUserId is not null)
        {
            var foundUser = await Http.GetFromJsonAsync<User>($"user/{taskCard.AssignedUserId}");
            assignedUserName = foundUser.UserName;
        }
        else
            assignedUserName = "None";
    }

    protected void OpenCardSettings() => visible = true;
    //{
    //    //var columnId = Columns.First().Id;
    //    //var newCardIndex = Columns.First().TaskCards != null ? Columns.First().TaskCards.Count : 0;
    //    DialogOptions options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

    //    DialogService.Show("Delete", /*parameters,*/ options);
    //}

    public void Dispose()
    {
        stateContainer.OnChange -= StateHasChanged;
    }
}
