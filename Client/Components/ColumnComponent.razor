@using Microsoft.AspNetCore.Components
@using trello_clone.Shared
@using trello_clone.Shared.Classes
@implements IDisposable
@inject HttpClient Http
@inject StateContainer StateContainer

<style>
    .column {
        border:solid;
        border-radius: 5px;
        border-width: 1px;
        width: 33%;
        height: 100%;
        overflow: scroll;
    }

    .tasks {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .dragging {
        cursor: grabbing;
    }

    .inserting {
        border-top: 1px solid black;
        margin-top: 5px;
    }

    .container {

    }
</style>


<div class="column" ondragover="event.preventDefault()" 
    @ondragenter="@(() => OnDragEnterColumn.InvokeAsync(Column.Id))"
     @ondrop="@(() => OnDropBottom())">
    <h3>@Column?.Name <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" @onclick="OpenCardSettings"></MudIconButton></h3>

    <ul class="tasks" ondragover="event.preventDefault()" >
        @foreach (var taskCard in TaskCards)
        {
            <li draggable="true" 
                class="@(DragEnter==taskCard?"inserting":"")" 
                @key=@taskCard.Id id="@taskCard.Id" 
                ondragover="event.preventDefault();"
                @ondragstart="@( (e) => OnDragStart(e, taskCard))" 
                @ondrop="@( () => HandleDropOver(taskCard))" 
                @ondragenter="@( ()=> OnDragEnter(taskCard) )"
                @ondragend="@( ()=> OnDragEnd() )"
            ><TaskCardComponent TaskCard="@taskCard" /></li>
        }
        <div style="height: 1.5em;"
            ondragover="event.preventDefault();"
            @ondrop="@(() => OnDropBottom())"
            @ondragenter="OnDragEnterBottom" />
    </ul>

    
</div>

<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
    <DialogContent>
        <MudText Align="Align.Center" Typo="Typo.h4">Settings</MudText>
        <MudButton OnClick="ToggleDeleteConfirm">Delete Column <MudIcon Icon="@Icons.Material.Filled.Delete"></MudIcon></MudButton>
    </DialogContent>
    <DialogActions>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="deleteVisible" Options="deleteOptions">
    <DialogContent>
        <MudText Align="Align.Center" Typo="Typo.h4">Delete Column "@Column.Name"?</MudText>
        <div >
            <MudButton OnClick="DeleteColumn" >Confirm</MudButton>
            <MudButton OnClick="ToggleDeleteConfirm">Cancel</MudButton>
        </div>
    </DialogContent>
    <DialogActions>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public Column? Column { get; set; }

    [Parameter]
    public EventCallback<Guid> OnDeleteColumn { get; set; }

    [Parameter]
    public EventCallback<TaskCard> OnCardDragStart { get; set; }

    [Parameter]
    public EventCallback OnCardDragEnd { get; set; }

    [Parameter]
    public EventCallback<Guid> OnDragEnterColumn { get; set; }

    [Parameter]
    public EventCallback<TaskCard> OnCardDropOver { get; set; }

    [Parameter]
    public EventCallback<TaskCard> OnCardDropBottom { get; set; }

    [Parameter]
    public EventCallback<TaskCard> OnCardDragEnter { get; set; }

    [Parameter]
    public EventCallback OnCardDragEnterBottom { get; set; }

    public List<TaskCard> TaskCards => Column?.TaskCards ?? new List<TaskCard>();

    private TaskCard? DraggedCard;
    private int DraggedItemPosition;
    private TaskCard? DragEnter;
    private bool visible = false;
    private bool deleteVisible = false;

    DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

    DialogOptions deleteOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Small };

    protected void OpenCardSettings() => visible = true;

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;


    }

    private void ToggleDeleteConfirm() => deleteVisible = !deleteVisible;

    private void DeleteColumn()
    {
        deleteVisible = false;
        visible = false;
        OnDeleteColumn.InvokeAsync(Column.Id);
    }

    public void HandleDropOver(TaskCard taskCard)
    {
        DragEnter = null;
        OnCardDropOver.InvokeAsync(taskCard);
    }

    public void OnDropBottom()
    {
        DragEnter = null;
        OnCardDropBottom.InvokeAsync();
    }

    public void OnDragStart(DragEventArgs e, TaskCard taskCard)
    {
        e.DataTransfer.EffectAllowed = "move"; 
        OnCardDragStart.InvokeAsync(taskCard);
    }

    public void OnDragEnter(TaskCard taskCard)
    {
        DragEnter = taskCard;
        OnCardDragEnter.InvokeAsync(taskCard);
    }

    public void OnDragEnterBottom()
    {
        DragEnter = null;
        OnCardDragEnterBottom.InvokeAsync();
    }

    public void OnDragEnd()
    {
        DragEnter = null;
        OnCardDragEnd.InvokeAsync();
    }
    


    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
